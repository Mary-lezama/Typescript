/*4. SimulaciÃ³n de Proceso de Pago AsÃ­ncrono con Manejo de Errores 
DiseÃ±a una funciÃ³n que simule un proceso de pago que tarda 3 segundos en 
completarse. Si el monto del pago es superior a $1000, el proceso debe fallar y 
lanzar un error. Utiliza try/catch para manejar el error de manera adecuada. 
Esta simulaciÃ³n es relevante para entender cÃ³mo gestionar errores en procesos 
financieros o de pago, en los cuales las validaciones son cruciales.*/

// SimulaciÃ³n de un proceso de pago
function procesarPago(monto) {
  return new Promise((resolve, reject) => {
    console.log(`ðŸ’¸ Procesando pago de $${monto}...`);

    setTimeout(() => {
      if (monto > 1000) {
        reject(new Error(`Pago rechazado: el monto $${monto} excede el lÃ­mite permitido.`));
      } else {
        resolve(`âœ… Pago de $${monto} completado con Ã©xito.`);
      }
    }, 3000); // Simula un retardo de 3 segundos
  });
}

// FunciÃ³n principal con manejo de errores
async function ejecutarPago() {
  try {
    const resultado = await procesarPago(800); // Cambia el monto para probar
    console.log(resultado);
  } catch (error) {
    console.error("âš  Error en el proceso de pago:", error.message);
  } finally {
    console.log("ðŸ§¾ Proceso de pago finalizado (Ã©xito o error).");
  }
}

// Ejecutar el ejemplo
ejecutarPago();
